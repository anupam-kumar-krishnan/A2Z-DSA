What is Time Complexity?
- Time Complexity != Time Taken
- the rate at which time taken increases with respect to input size
- time taken vs input size

time taken

   |   /
   |  / 
   | / theta(rate of increase)
   |/)_________ input size

How do we calculate Time Complexity?
- It is calculated in "Big-Oh Notation"
- O(), total number of steps is written inside brackets

Big Oh of below code is the to take number of steps

for(i=1;i<=5;i++){
   cout<<"Raj"
}

O(Nx3)

Steps:
1. Assigning; i=1
2. Comparision; i<=5
3. Printing; cout<<"Raj";
4. Increment; i++
5. Comparision Again
6. Print Again

But you can't always count steps manually

Three rules while calculating time complexity:
1. Always calculate for the worst case scenario
2. We will avoid including the constant terms
3. We will also avoid the lower values

In Short, -> TC, Worst Time Compelxity
          -> Avoid Constants
          -> Avoid Lower Values

Big O notation | Theta notation | Omega Notation
-----------------------------------------------
Worst case TC  |  Average Case  |  Best Case TC
Upper Bound    |                |  Lower Bound 

Best Case, Average Case and Worst Case with Example
---------------------------------------------------
Example:
if(marks<25)      cout<<"grade D"
else if(marks<45) cout<<"grade C" 
else if(marks<65) cout<<"grade B"
else		  cout<<"grade A" 

BEST CASE: when the program takes the least amount of time
for eg. marks=10
First condition will be checked and rest will be skipped

the program takes the least amount of time when it gets 
the output in the first occurance


WORST CASE: when the program found its value after iterating 
all the cases
for eg. marks=100
this satisfies the last condition, which means programs had 
to go through all conditions to get the output

AVERAGE CASE: this is the median of sum of best case and worst case
 

Why it is important to calculate worst time complexity?
- Suppose a system, built for 1 person or 1 million people
- why 1M, because you have to think of the scale up of the system
and that is why it is important to calcuate worst time complexity


CONSTANTS
e.g O(4N^3 + 3N^2 + 8)  input size, N = 10^5
    O(4x10^15 + 3x10^10 + 8) -> 8 will not have any significance
                                as the rest numbers are way
                                bigger than this

-> That is the reason, we do not consider "CONSTANTS" 


AVOID LOWER VALUES
------------------
Avoid the lower values which doesn't change the significance alot
O(4x10^15 + 3x10^10 + 8)

Here, 8 is far way from 10^15
Also, 10^10 will not change alot but slightly more, hence this can ce avoided

What is left then, 10^15, the highest


Example:
for(int i=0;i<N;i++)               | this will run till N
{
  for(int j=0;j<N;j++)             | this will also run till N  
  {
     ----------- - Block of code   | TC=N^2
  }
}

i=0  j={0,1,2,3,...N}
i=1  j={0,1,2,3,...N}
i=2  j={0,1,2,3,...N}
.
.
.
i= N-1 j={0,.....N}

it is running for
N+N+N+.....N
NxN
N^2